{"version":3,"sources":["scripts/main.js"],"names":["employeesTable","document","querySelector","addTableSorting","addRowSelect","addTableEditing","employeeForm","createForm","table","getNumber","string","replace","tHead","addEventListener","event","sortTable","sortedTable","sortedColumn","columnIndex","tBody","sortedRows","target","cellIndex","tBodies","rows","sort","firstRow","secondRow","firstRowText","cells","textContent","secondRowText","isSortOrderChanged","localeCompare","append","chosenRow","closest","previousChosenRow","classList","remove","add","className","form","createElement","innerHTML","addRowAppending","preventDefault","name","value","age","length","pushNotification","position","office","salary","newRow","toLocaleString","reset","top","right","title","description","type","message","style","setTimeout","body","tagName","modifiedCell","cellText","cellInputWidth","window","getComputedStyle","width","cellInput","maxWidth","e","key"],"mappings":"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","file":"main.fadf670f.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst employeesTable = document.querySelector('table');\n\naddTableSorting(employeesTable);\naddRowSelect(employeesTable);\naddTableEditing(employeesTable);\n\nconst employeeForm = createForm('new-employee-form');\n\ndocument.body.append(employeeForm);\n\naddRowAppending(employeeForm, employeesTable);\n\nfunction addTableSorting(table) {\n  table.tHead.addEventListener('click', (event) => {\n    sortTable(table, event.target);\n  });\n\n  function sortTable(sortedTable, sortedColumn) {\n    const columnIndex = sortedColumn.cellIndex;\n    const tBody = sortedTable.tBodies[0];\n\n    const sortedRows = [...tBody.rows].sort((firstRow, secondRow) => {\n      const firstRowText = firstRow.cells[columnIndex].textContent;\n      const secondRowText = secondRow.cells[columnIndex].textContent;\n\n      if (getNumber(firstRowText)) {\n        return sortedColumn.isSortOrderChanged\n          ? getNumber(secondRowText) - getNumber(firstRowText)\n          : getNumber(firstRowText) - getNumber(secondRowText);\n      }\n\n      return sortedColumn.isSortOrderChanged\n        ? secondRowText.localeCompare(firstRowText)\n        : firstRowText.localeCompare(secondRowText);\n    });\n\n    tBody.append(...sortedRows);\n\n    sortedColumn.isSortOrderChanged = !sortedColumn.isSortOrderChanged;\n  }\n\n  function getNumber(string) {\n    return +string.replace(/\\D*/g, '');\n  };\n}\n\nfunction addRowSelect(table) {\n  table.tBodies[0].addEventListener('click', (event) => {\n    const chosenRow = event.target.closest('TR');\n\n    if (!chosenRow) {\n      return;\n    }\n\n    const previousChosenRow = document.querySelector('tr.active');\n\n    if (previousChosenRow) {\n      previousChosenRow.classList.remove('active');\n    }\n\n    chosenRow.classList.add('active');\n  });\n}\n\nfunction createForm(className) {\n  const form = document.createElement('form');\n\n  form.classList.add(className);\n\n  form.innerHTML = `\n    <label for=\"name\">\n      Name:\n      <input\n        name=\"name\"\n        id=\"name\"\n        type=\"text\"\n        required\n      >\n    </label>\n    <label for=\"position\">\n      Position:\n      <input\n        name=\"position\"\n        id=\"position\"\n        type=\"text\"\n        required\n      >\n    </label>\n    <label for=\"office\">\n      Office:\n      <select\n        name=\"office\"\n        id=\"office\"\n        required\n      >\n        <option>Tokyo</option>\n        <option>Singapore</option>\n        <option>London</option>\n        <option>New York</option>\n        <option>Edinburgh</option>\n        <option>San Francisco</option>\n      </select>\n    </label>\n    <label for=\"age\">\n      Age:\n      <input\n        name=\"age\"\n        id=\"age\"\n        type=\"number\"\n        required\n      >\n    </label>\n    <label for=\"salary\">\n      Salary:\n      <input\n        name=\"salary\"\n        id=\"salary\"\n        type=\"number\"\n        required\n      >\n    </label>\n    <button type=\"submit\">Save to table</button>\n  `;\n\n  return form;\n}\n\nfunction addRowAppending(form, table) {\n  form.addEventListener('submit', (event) => {\n    event.preventDefault();\n\n    const name = form.name.value;\n    const age = +form.age.value;\n\n    if (name.length < 4) {\n      pushNotification(\n        10,\n        10,\n        'Error', 'Name should have minimum 4 letters',\n        'error'\n      );\n\n      return;\n    }\n\n    if (age < 18 || age > 90) {\n      pushNotification(\n        10,\n        10,\n        'Error',\n        'Age should be between 18 and 90',\n        'error'\n      );\n\n      return;\n    }\n\n    const position = form.position.value;\n    const office = form.office.value;\n    const salary = +form.salary.value;\n\n    const newRow = document.createElement('tr');\n\n    newRow.innerHTML = `\n      <td>${name}</td>\n      <td>${position}</td>\n      <td>${office}</td>\n      <td>${age}</td>\n      <td>$${salary.toLocaleString('en-GB')}</td>\n    `;\n\n    table.tBodies[0].append(newRow);\n\n    pushNotification(\n      10,\n      10,\n      'Done!',\n      'New employee was added to the table',\n      'success'\n    );\n\n    form.reset();\n  });\n}\n\nfunction pushNotification(top, right, title, description, type) {\n  const message = document.createElement('div');\n\n  message.classList.add('notification', type);\n\n  message.style.top = `${top}px`;\n  message.style.right = `${right}px`;\n\n  message.innerHTML = `\n    <h2 class=\"title\">${title}</h2>\n    <p>${description}</p>\n  `;\n\n  setTimeout(() => message.remove(), 2000);\n\n  document.body.append(message);\n};\n\nfunction addTableEditing(table) {\n  table.tBodies[0].addEventListener('dblclick', (event) => {\n    if (event.target.tagName !== 'TD') {\n      return;\n    }\n\n    const modifiedCell = event.target;\n    const cellText = modifiedCell.textContent;\n    const cellInputWidth = window.getComputedStyle(modifiedCell).width;\n\n    modifiedCell.innerHTML = `\n      <input\n        name=\"change\"\n        class=\"cell-input\"\n        value=\"${cellText}\"\n      >\n    `;\n\n    const cellInput = modifiedCell.querySelector('.cell-input');\n\n    cellInput.style.maxWidth = cellInputWidth;\n\n    cellInput.addEventListener('blur', (e) => {\n      modifiedCell.innerHTML = cellInput.value\n        ? cellInput.value\n        : cellText;\n    });\n\n    cellInput.addEventListener('keypress', (e) => {\n      if (e.key !== 'Enter') {\n        return;\n      }\n\n      modifiedCell.innerHTML = cellInput.value\n        ? cellInput.value\n        : cellText;\n    });\n  });\n}\n"]}